rule index_genome_fasta:
    input:
        # Input FASTA file
        "{outdir}/{database}/{species}/{release}/{genome}.primary_assembly.genome.fa"
    output:
        # Output index file generated by samtools faidx
        "{outdir}/{database}/{species}/{release}/{genome}.primary_assembly.genome.fa.fai"
    log:
        # Log file for samtools faidx command
        "{outdir}/{database}/{species}/{release}/logs/{genome}.index_genome_fasta.log"
    conda:
        # Conda environment specifying samtools
        "../envs/samtools.yaml"
    message:
        # Message displayed during rule execution
        "Indexing genome FASTA file for {wildcards.species} ({wildcards.release}) using samtools faidx."
    script:
        # Script for generating FASTA index with samtools
        "../scripts/index_genome_fasta.py"

rule generate_genome_sizes:
    input:
        # Input is the FASTA index file (.fai)
        "{outdir}/{database}/{species}/{release}/{genome}.primary_assembly.genome.fa.fai"
    output:
        # Output file containing chromosome sizes
        "{outdir}/{database}/{species}/{release}/{genome}.genome_sizes.txt"
    message:
        # Message displayed during rule execution
        "Extracting chromosome sizes from FASTA index for {wildcards.species} ({wildcards.release})."
    shell:
        # Extract chromosome sizes from the FASTA index file
        "cut -f1,2 {input} > {output}"

rule filter_gtf_annotation:
    input:
        # Input is the modified GTF file
        modified="{outdir}/{database}/{species}/{release}/{genome}.v{release}.primary_assembly.annotation.gtf"
    output:
        # Output is the filtered GTF file
        filtered="{outdir}/{database}/{species}/{release}/{genome}.v{release}.primary_assembly.annotation.filtered.gtf"
    params:
        # Parameters include paths for gene allow list and temporary files
        gene_allow_list="{outdir}/{database}/{species}/{release}/gene_allow_list",
        modified_temp="{outdir}/{database}/{species}/{release}/{genome}.v{release}.primary_assembly.annotation.modified_temp.gtf"
    log:
        # Log file for GTF filtering
        "{outdir}/{database}/{species}/{release}/logs/{genome}.filter_gtf_annotation.log"
    message:
        # Message displayed during rule execution
        "Filtering GTF annotation for {wildcards.species} ({wildcards.release}) based on gene allow list."
    script:
        # Script for filtering GTF based on gene allow list
        "../scripts/filter_gtf_annotation.sh"

rule convert_gtf_to_bed_format:
    input:
        # Input is the GTF file
        gtf="{outdir}/{database}/{species}/{release}/{genome}.v{release}.primary_assembly.annotation.gtf"
    output:
        # Output files include ID mapping and BED format
        id_mapping="{outdir}/{database}/{species}/{release}/{genome}.id_mapping.txt"
    params:
        # Parameters include paths for chr_list, BED files, and gene predictions
        chr_list="{outdir}/{database}/{species}/{release}/chr_list.txt",
        bed12="{outdir}/{database}/{species}/{release}/{genome}.v{release}.primary_assembly.annotation.bed",
        bed_gene_ids="{outdir}/{database}/{species}/{release}/bed_gene_ids.txt",
        gene_pred="{outdir}/{database}/{species}/{release}/genePred"
    log:
        # Log file for GTF to BED conversion
        "{outdir}/{database}/{species}/{release}/logs/{genome}.convert_gtf_to_bed_format.log"
    conda:
        # Conda environment specifying UCSC tools
        "../envs/ucsc-tools.yaml"
    message:
        # Message displayed during rule execution
        "Converting GTF to BED format for {wildcards.species} ({wildcards.release}) using UCSC tools."
    script:
        # Script for converting GTF to BED format using UCSC tools
        "../scripts/convert_gtf_to_bed_format.sh"
